@mixin experimental-property($vendors, $property, $value) {
	@each $vendor in $vendors {
		#{$vendor}-#{$property}: $value;
	}
	#{$property}: $value;
}

@mixin sprite($file, $row:1, $col:1, $width: 16px, $height: 16px)
{
	width: $width;
	height: $height;
	background-position: $row * $width $col*$height;
	background-image: url($file);
}

@mixin position($top: false, $left: false, $bottom: false, $right: false, $zindex: false) {
	position: absolute;
	@if type_of($top) == number {
		top: $top;
	}
	@if type_of($left) == number {
		left: $left;
	}
	@if type_of($bottom) == number {
		bottom: $bottom;
	}
	@if type_of($right) == number {
		right: $right;
	}
	@if type_of($zindex) == number {
		z-index: $zindex;
	}
}

@mixin size($width: false, $height: false) {
	content: '';

	@if type_of($width) == number {
		width: $width;
	}
	
	@if type_of($height) == number {
		height: $height;
	}
}

@mixin box-shadow($x: 0, $y: 0, $blur: 0, $color: transparent, $inset: false) {
	@if $inset {
		@include experimental-property(-webkit -moz, box-shadow, inset $x $y $blur $color);
	}
	@else {
		@include experimental-property(-webkit -moz, box-shadow, $x $y $blur $color);
	}
}

@mixin box-sizing($value) {
	@include experimental-property(-webkit -moz -o, border-sizing, $value);
}

@mixin border-radius($radius: false, $topleft: false, $topright: false, $bottomright: false, $bottomleft: false) {
	@if type_of($radius) == number {
		@include experimental-property(-webkit -moz, border-radius, $radius);
	}
	@if type_of($topleft) == number {
		-webkit-border-top-left-radius: $topleft;
		   -moz-border-radius-topleft: $topleft;
		        border-top-left-radius: $topleft;
	}
	@if type_of($topright) == number {
		-webkit-border-top-right-radius: $topright;
		   -moz-border-radius-topright: $topright;
		        border-top-right-radius: $topright;
	}
	@if type_of($bottomright) == number {
		-webkit-border-bottom-right-radius: $bottomright;
		   -moz-border-radius-bottomright: $bottomright;
		        border-bottom-right-radius: $bottomright;
	}
	@if type_of($bottomleft) == number {
		-webkit-border-bottom-left-radius: $bottomleft;
		   -moz-border-radius-bottomleft: $bottomleft;
		        border-bottom-left-radius: $bottomleft;
	}
}

@mixin box-sizing($value) {
	@include experimental-property(-webkit -moz, box-sizing, $value);
}

@mixin transition($property: false, $time: 1s, $ease: linear) {
	@if $property == none {
		@include experimental-property(-webkit -moz -o, transition, none);
	}
	@else {
		@include experimental-property(-webkit -moz -o, transition, $property $time $ease);
	}
}

@mixin hires-graphic($file, $type, $width, $height) {
	$file_name: $file + '.' + $type;
	$retina_name: $file + '_2x.' + $type;
	
	background-image: url('../images/' + $file_name);
	
	@media (-webkit-min-device-pixel-ratio: 2) {
		background-image: url('../images/' + $retina_name) !important;
		-webkit-background-size: $width $height;
	}
}

@mixin background-clip($clip)
{
	@include experimental-property(-webkit -moz -o, background-clip, $clip);
}

@mixin radial-gradient($firstStopColor, $secondStopColor, $origin: center, $firstStopPosition: 0%, $secondStopPosition: 100%, $shape: ellipse, $size: cover)
{	
	$kind: $shape $size;
	$firstStop: $firstStopColor $firstStopPosition;
	$secondStop: $secondStopColor $secondStopPosition;
	
	background-color: $firstStopColor;
	background-image: -moz-radial-gradient($origin, $kind, $firstStop, $secondStop);
	background-image: -webkit-radial-gradient($origin, $kind, $firstStop, $secondStop);
	background-image: -o-radial-gradient($origin, $kind, $firstStop, $secondStop);
	background-image: -ms-radial-gradient($origin, $kind, $firstStop, $secondStop);
	background-image: radial-gradient($origin, $kind, $firstStop, $secondStop)
}

@mixin linear-gradient-legacy($first, $last) {
	background: $first; /* Old browsers */
	background: -moz-linear-gradient(top, $first 0%, $last 100%); /* FF3.6+ */
	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$first), color-stop(100%,$last)); /* Chrome,Safari4+ */
	background: -webkit-linear-gradient(top, $first 0%,$last 100%); /* Chrome10+,Safari5.1+ */
	background: -o-linear-gradient(top, $first 0%,$last 100%); /* Opera11.10+ */
	background: -ms-linear-gradient(top, $first 0%,$last 100%); /* IE10+ */
	filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$first}', endColorstr='#{$last}',GradientType=0); /*IE6-9 */
	background: linear-gradient(top, $first 0%,$last 100%); /* W3C */
}

@mixin linear-gradient($colors, $stops, $direction: top) {
	@if type-of($colors) != list {
		@include linear-gradient-legacy($colors, $stops);
	}
	@else {
		$firstColor: '';
		$lastColor: '';
		$ci: 1;
		$list: 0;
		@each $color in $colors {
			@if $ci == 1 {
				$firstColor: $color;
			}
			@if $ci + 1 == length($colors) {
				$lastColor: $color;
			}
			$list_item: join($color, nth($stops, $ci), space);
			@if $list == 0 {
				$list: $list_item;
			}
			@else {
				$list: $list, $list_item;
			}
			$ci: $ci + 1;
		}
		background: $firstColor; /* Old browsers */
		background: -moz-linear-gradient($direction, $list); /* FF3.6+ */
		background: -webkit-linear-gradient($direction, $list); /* Chrome10+,Safari5.1+ */
		background: -ms-linear-gradient($direction, $list); /* Opera11.10+ */
		background: -o-linear-gradient($direction, $list); /* IE10+ */
		filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$firstColor}', endColorstr='#{$lastColor}',GradientType=0); /*IE6-9 */
		background: linear-gradient($direction, $list); /* W3C */
	}
}

@function columns($count: 1, $padding: 0) {
	$column-width: 60px !default;
	
	$value: $count * $column-width - $padding;
	@return $value;
}

@mixin clearfix()
{
	&:after {
		clear: both;
		content: ".";
		display: block;
		height: 0;
		visibility: hidden;
		font-size: 0;
	}
}

@mixin user-select($value) {
	@include experimental-property(-webkit -moz -o, user-select, $value);
}